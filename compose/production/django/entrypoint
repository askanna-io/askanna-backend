#!/bin/sh

set -o errexit
set -o pipefail
set -o nounset

postgres_ready() {
    python <<END
import sys

import psycopg2

try:
    psycopg2.connect(
        dbname="${POSTGRES_DB}",
        user="${POSTGRES_USER}",
        password="${POSTGRES_PASSWORD}",
        host="${POSTGRES_HOST}",
        port="${POSTGRES_PORT}",
    )
except psycopg2.OperationalError:
    sys.exit(-1)
sys.exit(0)

END
}
until postgres_ready; do
    echo >&2 'Waiting for PostgreSQL to become available...'
    sleep 1
done
echo >&2 'PostgreSQL is available'

runinfo_postgres_ready() {
    python <<END
import sys

import psycopg2

try:
    psycopg2.connect(
        dbname="runinfo",
        user="${POSTGRES_USER}",
        password="${POSTGRES_PASSWORD}",
        host="${POSTGRES_HOST}",
        port="${POSTGRES_PORT}",
    )
except psycopg2.OperationalError:
    # get the isolation leve for autocommit
    autocommit = psycopg2.extensions.ISOLATION_LEVEL_AUTOCOMMIT
    print ("ISOLATION_LEVEL_AUTOCOMMIT:", psycopg2.extensions.ISOLATION_LEVEL_AUTOCOMMIT)

    conn = psycopg2.connect(
        dbname="postgres",
        user="${POSTGRES_USER}",
        password="${POSTGRES_PASSWORD}",
        host="${POSTGRES_HOST}",
        port="${POSTGRES_PORT}",
    )

    # set the isolation level for the connection's cursors
    # will raise ActiveSqlTransaction exception otherwise
    conn.set_isolation_level( autocommit )

    cursor = conn.cursor()
    cursor.execute("CREATE DATABASE runinfo")
    cursor.close()
    conn.close()
    # exit and re-connect next time
    sys.exit(-1)
sys.exit(0)

END
}
until runinfo_postgres_ready; do
    echo >&2 'Waiting for PostgreSQL runinfo to become available...'
    sleep 1
done
echo >&2 'PostgreSQL runinfo is available'

USER=django
GROUP=django
# Create django user and group if missing.
if ! id django; then
    # ----------------------------------------------------------------------------#
    # Make the django user have the same UID and GID as the owner of the
    # workdir. This avoids conflicts with owner/group for linux mounted volumes.
    # Mounted volumes on macOS ignore the owner/group, so this is safe there.
    # ----------------------------------------------------------------------------#
    # Create the django group, if possible with same GID as owner of
    # workdir.
    echo >&2 'Creating django group'
    DIR_GID=$(stat -c '%g' .)
    addgroup -S -g $DIR_GID $GROUP || addgroup -S $GROUP
    # ----------------------------------------------------------------------------#
    # Create the django user, if possible with same UID as owner of
    # workdir.
    echo >&2 'Creating django user'
    DIR_UID=$(stat -c '%u' .)
    adduser -S -u $DIR_UID -G $GROUP $USER || adduser -S -G $GROUP $USER
fi

# If the current owner of the workdir is root then it is not a mounted
# linux volume, which means changing the owner is safe as it will not
# propagate to the mounted volume from the host.
# Change owner of the workdir so that django can freely modify files
# under it if needed.
if [[ $(stat -c '%g' .) == 0 ]]; then
    echo >&2 'Ensuring workdir ownership by django user'
    chown django:django .
    echo >&2 'Ensuring storage_root ownership by django user'
    mkdir -p storage_root
    chown django:django storage_root
fi

# From: https://vitorbaptista.com/how-to-access-hosts-docker-socket-without-root
# Based on https://github.com/jenkinsci/docker/issues/196#issuecomment-179486312
# Altered to add django user to the group from /var/run/docker.sock
# Getting the groupname with stat -c "%G" /var/run/docker.sock
# Then add this group to the django user
DOCKER_SOCKET=/var/run/docker.sock
DOCKER_GROUP=docker
if [ -S ${DOCKER_SOCKET} ]; then
    FILE_GID=$(stat -c '%g' ${DOCKER_SOCKET})
    FILE_GNAME=$(stat -c '%G' ${DOCKER_SOCKET})

    # Create the group if it does not exists.
    if ! grep -q $FILE_GNAME /etc/group; then
        echo >&2 'Creating docker group'
        addgroup --gid ${FILE_GID} ${DOCKER_GROUP}
        FILE_GNAME=${DOCKER_GROUP}
    fi

    echo >&2 'Adding django user to the docker group'
    addgroup django ${FILE_GNAME}
fi

echo "\$0 is '$0'"
echo "\$@ is '$@'"

# Execute the rest of the script with user django
su -s /bin/sh $USER -c "$@"
