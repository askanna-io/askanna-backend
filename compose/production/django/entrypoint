#!/bin/sh

set -o errexit
set -o pipefail
set -o nounset

if [ -z "${POSTGRES_USER}" ]; then
    base_postgres_image_default_user='postgres'
    export POSTGRES_USER="${base_postgres_image_default_user}"
fi
export DATABASE_URL="postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}"

postgres_ready() {
python << END
import sys

import psycopg2

try:
    psycopg2.connect(
        dbname="${POSTGRES_DB}",
        user="${POSTGRES_USER}",
        password="${POSTGRES_PASSWORD}",
        host="${POSTGRES_HOST}",
        port="${POSTGRES_PORT}",
    )
except psycopg2.OperationalError:
    sys.exit(-1)
sys.exit(0)

END
}
until postgres_ready; do
  >&2 echo 'Waiting for PostgreSQL to become available...'
  sleep 1
done
>&2 echo 'PostgreSQL is available'


# From: https://vitorbaptista.com/how-to-access-hosts-docker-socket-without-root
# Based on https://github.com/jenkinsci/docker/issues/196#issuecomment-179486312
# Altered to add django user to the group from /var/run/docker.sock
# Getting the groupname with stat -c "%G" /var/run/docker.sock
# Then add this group to the django user

DOCKER_SOCKET=/var/run/docker.sock
DOCKER_GROUP=docker
REGULAR_USER=django

if [ -S ${DOCKER_SOCKET} ]; then
    FILE_GID=$(stat -c '%g' ${DOCKER_SOCKET})
    FILE_GNAME=$(stat -c '%G' ${DOCKER_SOCKET})
    whoami
    addgroup django ${FILE_GNAME}
fi


# Execute the rest of the script with user django
su -c "$0" -s /bin/sh django -- "$@"
