#!/bin/bash

set -o errexit
set -o pipefail
set -o nounset

postgres_ready() {
    python <<END
import sys

import psycopg2

try:
    psycopg2.connect(
        dbname="${POSTGRES_DB}",
        user="${POSTGRES_USER}",
        password="${POSTGRES_PASSWORD}",
        host="${POSTGRES_HOST}",
        port="${POSTGRES_PORT}",
    )
except psycopg2.OperationalError:
    sys.exit(-1)
sys.exit(0)

END
}
until postgres_ready; do
    echo >&2 'Waiting for PostgreSQL to become available...'
    sleep 1
done
echo >&2 'PostgreSQL is available'

USER=django
GROUP=django
# Create django user and group if missing.
if ! id -u "$USER" &> /dev/null ; then
    # -----------------------------------------------------------------------------
    # Make the django user have the same UID and GID as the owner of the
    # workdir. This avoids conflicts with owner/group for Linux mounted volumes.
    # Mounted volumes on MacOS ignore the owner/group, so this is safe there.

    # -----------------------------------------------------------------------------
    # Create the django group, if possible with same GID as owner of workdir.
    DIR_GID=$(stat -c '%g' .)
    addgroup --system --gid "$DIR_GID" $GROUP || addgroup --system $GROUP

    # -----------------------------------------------------------------------------
    # Create the django user, if possible with same UID as owner of workdir.
    DIR_UID=$(stat -c '%u' .)
    adduser --system --no-create-home --uid "$DIR_UID" --ingroup $GROUP $USER \
    || adduser --system --no-create-home --ingroup $GROUP $USER
fi

# If the current owner of the workdir is root then it is not a mounted
# Linux volume, which means changing the owner is safe as it will not
# propagate to the mounted volume from the host.
# Change owner of the workdir so that django can freely modify files
# under it if needed.
if [[ $(stat -c '%g' .) == 0 ]]; then
    echo >&2 'Ensuring workdir ownership by django user'
    chown django:django .
    echo >&2 'Ensuring storage_root ownership by django user'
    mkdir -p storage_root
    chown django:django storage_root
fi

# From: https://vitorbaptista.com/how-to-access-hosts-docker-socket-without-root
# Based on https://github.com/jenkinsci/docker/issues/196#issuecomment-179486312
# Altered to add django user to the group from /var/run/docker.sock
# Getting the groupname with stat -c "%G" /var/run/docker.sock
# Then add this group to the django user
DOCKER_SOCKET=/var/run/docker.sock
DOCKER_GROUP=docker
if [ -S ${DOCKER_SOCKET} ]; then
    DOCKER_GID=$(stat -c '%g' $DOCKER_SOCKET)

    if ! grep -q "^${DOCKER_GROUP}:" /etc/group; then
        addgroup --system --gid "$DOCKER_GID" $DOCKER_GROUP || addgroup --system $DOCKER_GROUP
    fi

    adduser django ${DOCKER_GROUP}
fi

# Execute the rest of the script with user django
su -s /bin/bash $USER -c "$@"
