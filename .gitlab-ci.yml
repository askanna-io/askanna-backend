variables:
  DOCKER_PRODUCTION: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  DOCKER_REVIEW: $CI_REGISTRY_IMAGE/review:$CI_COMMIT_REF_SLUG

stages:
  - build base
  - build
  - test
  - deploy
  - release
  - publish
  - cleanup

include:
  - template: Code-Quality.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml

# To use Kaniko extend the job and set the variable for DOCKER_DESTINATION and optionally DOCKER_FILE
.use-kaniko:
  tags:
    - kubernetes
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: ['']
  before_script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
  script:
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $DOCKER_FILE --destination $DOCKER_DESTINATION

build_base:
  stage: build base
  extends: .use-kaniko
  variables:
    DOCKER_FILE: $CI_PROJECT_DIR/docker/Dockerfile-base
  rules:
    - if: ($CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "main")
      changes:
        - docker/Dockerfile-base
        - requirements/base.txt
        - requirements/production.txt
      variables:
        DOCKER_DESTINATION: $CI_REGISTRY_IMAGE/base:master
    - if: ($CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "main")
      when: manual
      allow_failure: true
      variables:
        DOCKER_DESTINATION: $CI_REGISTRY_IMAGE/base:master
    - if: ($CI_COMMIT_BRANCH == "beta" || $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/)
      changes:
        - docker/Dockerfile-base
        - requirements/base.txt
        - requirements/production.txt
      variables:
        DOCKER_DESTINATION: $CI_REGISTRY_IMAGE/base:beta
    - if: ($CI_COMMIT_BRANCH == "beta" || $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/)
      when: manual
      allow_failure: true
      variables:
        DOCKER_DESTINATION: $CI_REGISTRY_IMAGE/base:beta
    - if: $CI_COMMIT_BRANCH
      changes:
        - docker/Dockerfile-base
        - requirements/base.txt
        - requirements/production.txt
      variables:
        DOCKER_DESTINATION: $CI_REGISTRY_IMAGE/base:review
    - if: $CI_COMMIT_BRANCH
      when: manual
      allow_failure: true
      variables:
        DOCKER_DESTINATION: $CI_REGISTRY_IMAGE/base:review

build_production:
  stage: build
  extends: .use-kaniko
  variables:
    DOCKER_FILE: $CI_PROJECT_DIR/docker/production/django/Dockerfile
  rules:
    - if: ($CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "main")
      variables:
        DOCKER_BASE_IMAGE: $CI_REGISTRY_IMAGE/base:master
        DOCKER_DESTINATION: $DOCKER_PRODUCTION
    - if: ($CI_COMMIT_BRANCH == "beta" || $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/)
      variables:
        DOCKER_BASE_IMAGE: $CI_REGISTRY_IMAGE/base:beta
        DOCKER_DESTINATION: $DOCKER_PRODUCTION
    - if: $CI_COMMIT_BRANCH
      variables:
        DOCKER_BASE_IMAGE: $CI_REGISTRY_IMAGE/base:review
        DOCKER_DESTINATION: $DOCKER_REVIEW
  script:
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $DOCKER_FILE --destination $DOCKER_DESTINATION --build-arg BASE_IMAGE=$DOCKER_BASE_IMAGE

code_quality:
  rules:
    - if: ($CODE_QUALITY_DISABLED || $CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "beta" || $CI_COMMIT_TAG)
      when: never
    - if: $CI_COMMIT_BRANCH
  before_script:
    - echo -e "[pycodestyle]\nmax-line-length = 119" > setup.cfg
    - echo -e "rule 'MD013', :line_length = 119" > .mdlrc

.test-base:
  stage: test
  image:
    name: $DOCKER_IMAGE
    pull_policy: always
  needs:
    - job: build_production
  tags:
    - kubernetes
  rules:
    - if: ($CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/)
      variables:
        DOCKER_IMAGE: $CI_REGISTRY_IMAGE/base:master
    - if: $CI_COMMIT_BRANCH == "beta"
      variables:
        DOCKER_IMAGE: $CI_REGISTRY_IMAGE/base:beta
    - if: $CI_COMMIT_BRANCH
      variables:
        DOCKER_IMAGE: $CI_REGISTRY_IMAGE/base:review
  before_script:
    - pip install -r requirements/local.txt

.test-base-services:
  extends: .test-base
  variables:
    DJANGO_SECRET_KEY: $CI_COMMIT_SHA
    DJANGO_ALLOWED_HOSTS: "*"
    DJANGO_EMAIL_BACKEND: django.core.mail.backends.locmem.EmailBackend
    DJANGO_SECURE_SSL_REDIRECT: "False"
    REDIS_URL: redis://redis:6379/0
    CELERY_BROKER_URL: $REDIS_URL
    POSTGRES_HOST: postgres
    POSTGRES_PORT: 5432
    POSTGRES_USER: anna
    POSTGRES_PASSWORD: password
    POSTGRES_DB: askanna_backend
    MINIO_ENDPOINT: minio:9000
    MINIO_EXTERNAL_ENDPOINT: localhost:9000
    MINIO_ROOT_USER: anna
    MINIO_ROOT_PASSWORD: password
    MINIO_ACCESS_KEY: $MINIO_ROOT_USER
    MINIO_SECRET_KEY: $MINIO_ROOT_PASSWORD
    ASKANNA_API_URL: http://localhost:8000
    ASKANNA_CDN_URL: http://localhost:8000/files
    ASKANNA_UI_URL: http://localhost:4173
    ASKANNA_FILESTORAGE: filesystem
    ASKANNA_FILE_DOWNLOAD_VIA_DJANGO: "True"
  services:
    - name: postgres:12
      alias: postgres
    - name: redis:7
      alias: redis
    - name: minio/minio:RELEASE.2023-09-04T19-57-37Z
      alias: minio
      command: ["server", "/data"]

pytest:
  extends: .test-base-services
  parallel:
    matrix:
      - ASKANNA_FILESTORAGE: [filesystem, minio]
  variables:
    KUBERNETES_CPU_REQUEST: 2
    KUBERNETES_MEMORY_REQUEST: 2Gi
  script:
    - python manage.py collectstatic --no-input
    - pytest --cov=apps --cov-config=pyproject.toml --cov-report xml --cov-report html --cov-report term --junitxml=junit.xml
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    expire_in: 2 weeks
    name: $CI_JOB_NAME-$CI_COMMIT_REF_SLUG
    paths:
      - htmlcov/
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: junit.xml

migrations:
  extends: .test-base-services
  before_script:
    - pip install -r requirements/production.txt
  script:
    - python manage.py makemigrations --dry-run --check --no-input

lint:
  extends: .test-base
  script:
    - ruff check .

pre-commit:
  extends: .test-base
  script:
    - pre-commit run --all-files

.deploy-variables:
  variables:
    GIT_STRATEGY: none
    ASKANNA_DEPLOY_BRANCH: add-minio-to-askanna-backend
    ASKANNA_DEPLOY_PRODUCT: askanna-backend

.deploy:
  stage: deploy
  image: curlimages/curl
  extends: .deploy-variables
  tags:
    - kubernetes
  script:
    - curl -X POST -F token=$CI_JOB_TOKEN -F ref=$ASKANNA_DEPLOY_BRANCH -F variables[product]=$ASKANNA_DEPLOY_PRODUCT -F variables[action]=deploy -F variables[env_name]=$ENV_NAME -F variables[env_host]=$ENV_HOST -F variables[backend_image]=$DOCKER_IMAGE $ASKANNA_DEPLOY_TRIGGER
  environment:
    name: $ENV_NAME
    url: https://$ENV_HOST/v1/docs/swagger/

deploy_review:
  extends: .deploy
  rules:
    - if: ($CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "beta" || $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/)
      when: never
    - if: $CI_COMMIT_BRANCH
      variables:
        ENV_NAME: $CI_COMMIT_REF_SLUG
        ENV_HOST: $CI_ENVIRONMENT_SLUG-api.askanna.eu
        DOCKER_IMAGE: $DOCKER_REVIEW
  needs:
    - job: build_production
    - job: migrations
  environment:
    name: $ENV_NAME
    url: https://$ENV_HOST/v1/docs/swagger/
    on_stop: stop_review

deploy_production:
  extends: .deploy
  rules:
    - if: ($CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "main")
      when: manual
      variables:
        ENV_NAME: master
        ENV_HOST: api.askanna.eu
        DOCKER_IMAGE: $DOCKER_PRODUCTION
    - if: ($CI_COMMIT_BRANCH == "beta" || $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/)
      when: manual
      variables:
        ENV_NAME: beta
        ENV_HOST: beta-api.askanna.eu
        DOCKER_IMAGE: $DOCKER_PRODUCTION
  needs:
    - job: build_production
    - job: pytest
    - job: migrations

stop_review:
  stage: cleanup
  image: curlimages/curl
  extends: .deploy-variables
  variables:
    ENV_NAME: $CI_COMMIT_REF_SLUG
  rules:
    - if: ($CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "beta" || $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/)
      when: never
    - if: $CI_COMMIT_BRANCH
      when: manual
  needs:
    - job: deploy_review
  environment:
    name: $ENV_NAME
    action: stop
  allow_failure: true
  tags:
    - kubernetes
  script:
    - curl -X POST -F token=$CI_JOB_TOKEN -F ref=$ASKANNA_DEPLOY_BRANCH -F variables[product]=$ASKANNA_DEPLOY_PRODUCT -F variables[action]=undeploy -F variables[env_name]=$ENV_NAME -F variables[env_host]=$ENV_HOST -F variables[backend_image]=$DOCKER_IMAGE $ASKANNA_DEPLOY_TRIGGER

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/
  script:
    - echo "Creating a new release..."
  release:
    tag_name: $CI_COMMIT_TAG
    description: $CI_COMMIT_TAG_MESSAGE

publish_to_gitlab:
  stage: publish
  needs:
    - job: build_production
    - job: deploy_production
      optional: true
    - job: release
      optional: true
  tags:
    - kubernetes
  allow_failure: true
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/'
      variables:
        TARGET: refs/tags/$CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH
      when: manual
      variables:
        TARGET: HEAD:$CI_COMMIT_BRANCH
  before_script:
    - apt-get update -y && apt-get install openssh-client git curl -y
    - eval $(ssh-agent -s)
    - echo "${SSH_PRIVATE_KEY_GITLAB_COM}" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - git config --global user.email "hello@askanna.io"
    - git config --global user.name "AskAnna Robot"
  script:
    - git remote add gitlab git@gitlab.com:askanna/askanna-backend.git
    - git push gitlab $TARGET

publish_release_to_gitlab:
  stage: publish
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - job: build_production
    - job: deploy_production
      optional: true
    - job: release
    - job: publish_to_gitlab
  tags:
    - kubernetes
  allow_failure: true
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/'
  variables:
    GITLAB_PRIVATE_TOKEN: $GITLAB_COM_API_TOKEN
  script:
    - release-cli --server-url https://gitlab.com --project-id 46875844 create --tag-name $CI_COMMIT_TAG --description "$CI_COMMIT_TAG_MESSAGE"

publish_to_github:
  stage: publish
  needs:
    - job: build_production
    - job: deploy_production
      optional: true
    - job: release
      optional: true
  tags:
    - kubernetes
  allow_failure: true
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/'
      variables:
        TARGET: refs/tags/$CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH
      when: manual
      variables:
        TARGET: HEAD:$CI_COMMIT_BRANCH
  before_script:
    - apt-get update -y && apt-get install openssh-client git curl -y
    - eval $(ssh-agent -s)
    - echo "${SSH_PRIVATE_KEY_GITHUB_COM}" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan github.com >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - git config --global user.email "hello@askanna.io"
    - git config --global user.name "AskAnna Robot"
  script:
    - git remote add github git@github.com:askanna-io/askanna-backend.git
    - git push github $TARGET

publish_release_to_github:
  image: ubuntu:22.04
  stage: publish
  needs:
    - job: build_production
    - job: deploy_production
      optional: true
    - job: release
    - job: publish_to_github
  tags:
    - kubernetes
  allow_failure: true
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/'
  variables:
    GH_TOKEN: $GITHUB_COM_API_TOKEN
  before_script:
    - apt-get update -y && apt-get install curl -y
    - curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
    - chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
    - echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null
    - apt-get update -y && apt-get install gh -y
  script:
    - gh release create $CI_COMMIT_TAG --verify-tag --title $CI_COMMIT_TAG --notes "$CI_COMMIT_TAG_MESSAGE" --repo askanna-io/askanna-backend
