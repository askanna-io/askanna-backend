stages:
  - build base
  - build
  - test
  - deploy
  - release
  - cleanup

include:
  - template: Code-Quality.gitlab-ci.yml

# To use Kaniko extend the job and set the variable for DOCKER_DESTINATION and optionally DOCKER_FILE
.use-kaniko:
  tags:
    - kubernetes
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: ['']
  before_script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
  script:
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $DOCKER_FILE --destination $DOCKER_DESTINATION

build_base:
  stage: build base
  extends: .use-kaniko
  variables:
    DOCKER_FILE: $CI_PROJECT_DIR/docker/Dockerfile-base
  rules:
    - if: ($CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "main")
      changes:
        - docker/Dockerfile-base
        - requirements/base.txt
        - requirements/production.txt
      variables:
        DOCKER_DESTINATION: $CI_REGISTRY_IMAGE/base:master
    - if: ($CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "main")
      when: manual
      allow_failure: true
      variables:
        DOCKER_DESTINATION: $CI_REGISTRY_IMAGE/base:master
    - if: $CI_COMMIT_BRANCH == "beta"
      changes:
        - docker/Dockerfile-base
        - requirements/base.txt
        - requirements/production.txt
      variables:
        DOCKER_DESTINATION: $CI_REGISTRY_IMAGE/base:beta
    - if: $CI_COMMIT_BRANCH == "beta"
      when: manual
      allow_failure: true
      variables:
        DOCKER_DESTINATION: $CI_REGISTRY_IMAGE/base:beta
    - if: $CI_COMMIT_BRANCH
      changes:
        - docker/Dockerfile-base
        - requirements/base.txt
        - requirements/production.txt
      variables:
        DOCKER_DESTINATION: $CI_REGISTRY_IMAGE/base:review
    - if: $CI_COMMIT_BRANCH
      when: manual
      allow_failure: true
      variables:
        DOCKER_DESTINATION: $CI_REGISTRY_IMAGE/base:review

build_production:
  stage: build
  extends: .use-kaniko
  variables:
    DOCKER_FILE: $CI_PROJECT_DIR/docker/production/django/Dockerfile
  rules:
    - if: ($CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "main")
      variables:
        DOCKER_BASE_IMAGE: $CI_REGISTRY_IMAGE/base:master
        DOCKER_DESTINATION: $CI_REGISTRY_IMAGE:master
    - if: $CI_COMMIT_BRANCH == "beta"
      variables:
        DOCKER_BASE_IMAGE: $CI_REGISTRY_IMAGE/base:beta
        DOCKER_DESTINATION: $CI_REGISTRY_IMAGE:beta
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/
      variables:
        DOCKER_BASE_IMAGE: $CI_REGISTRY_IMAGE/base:master
        DOCKER_DESTINATION: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    - if: $CI_COMMIT_BRANCH
      variables:
        DOCKER_BASE_IMAGE: $CI_REGISTRY_IMAGE/base:review
        DOCKER_DESTINATION: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  script:
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $DOCKER_FILE --destination $DOCKER_DESTINATION --build-arg BASE_IMAGE=$DOCKER_BASE_IMAGE

code_quality:
  rules:
    - if: ($CODE_QUALITY_DISABLED || $CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "beta" || $CI_COMMIT_TAG)
      when: never
    - if: $CI_COMMIT_BRANCH
  before_script:
    - echo -e "[pycodestyle]\nmax-line-length = 119" > setup.cfg
    - echo -e "rule 'MD013', :line_length = 119" > .mdlrc

.test-base:
  stage: test
  image: $DOCKER_IMAGE
  needs:
    - job: build_production
  tags:
    - kubernetes
  rules:
    - if: ($CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "main")
      variables:
        DOCKER_IMAGE: $CI_REGISTRY_IMAGE:master
    - if: $CI_COMMIT_BRANCH == "beta"
      variables:
        DOCKER_IMAGE: $CI_REGISTRY_IMAGE:beta
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/
      variables:
        DOCKER_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    - if: $CI_COMMIT_BRANCH
      variables:
        DOCKER_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG

.test-base-services:
  extends: .test-base
  variables:
    DJANGO_SECRET_KEY: $CI_COMMIT_SHA
    DJANGO_ALLOWED_HOSTS: "*"
    DJANGO_EMAIL_BACKEND: django.core.mail.backends.locmem.EmailBackend
    DJANGO_SECURE_SSL_REDIRECT: "False"
    REDIS_URL: redis://redis:6379/0
    CELERY_BROKER_URL: $REDIS_URL
    POSTGRES_HOST: postgres
    POSTGRES_PORT: 5432
    POSTGRES_USER: anna
    POSTGRES_PASSWORD: pass
    POSTGRES_DB: askanna_backend
  services:
    - name: postgres:12
      alias: postgres
    - name: redis:7
      alias: redis

pytest:
  extends: .test-base-services
  before_script:
    - pip install -r requirements/local.txt
  script:
    - python manage.py collectstatic --no-input
    - pytest --cov=askanna_backend --cov-config=pyproject.toml --cov-report xml --cov-report html --cov-report term --junitxml=junit.xml
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    expire_in: 2 weeks
    name: $CI_JOB_NAME-$CI_COMMIT_REF_SLUG
    paths:
      - htmlcov/
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: junit.xml

migrations:
  extends: .test-base-services
  script:
    - python manage.py makemigrations --dry-run --check --no-input

lint:
  extends: .test-base
  before_script:
    - pip install -r requirements/local.txt
  script:
    - ruff check .

.deploy-variables:
  variables:
    GIT_STRATEGY: none
    ASKANNA_DEPLOY_BRANCH: main
    ASKANNA_DEPLOY_PRODUCT: askanna-backend

.deploy:
  stage: deploy
  image: curlimages/curl
  extends: .deploy-variables
  tags:
    - kubernetes
  script:
    - curl -X POST -F token=$CI_JOB_TOKEN -F ref=$ASKANNA_DEPLOY_BRANCH -F variables[product]=$ASKANNA_DEPLOY_PRODUCT -F variables[action]=deploy -F variables[branch]=$CI_COMMIT_REF_SLUG  -F variables[slug]=$CI_ENVIRONMENT_SLUG $ASKANNA_DEPLOY_TRIGGER

deploy_review:
  extends: .deploy
  rules:
    - if: ($CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "beta" || $CI_COMMIT_TAG)
      when: never
    - if: $CI_COMMIT_BRANCH
  needs:
    - job: build_production
    - job: migrations
  environment:
    name: $CI_COMMIT_REF_NAME
    url: https://$CI_ENVIRONMENT_SLUG-api.askanna.eu/v1/docs/swagger/
    on_stop: stop_review

deploy_production:
  extends: .deploy
  rules:
    - if: ($CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "main")
      when: manual
      variables:
        ENV_NAME: master
        ENV_HOST: api.askanna.eu/v1/docs/swagger/
    - if: $CI_COMMIT_BRANCH == "beta"
      when: manual
      variables:
        ENV_NAME: beta
        ENV_HOST: beta-api.askanna.eu/v1/docs/swagger/
  needs:
    - job: build_production
    - job: pytest
    - job: migrations
  environment:
    name: $ENV_NAME
    url: https://$ENV_HOST

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/
  script:
    - echo "Creating a new release..."
  release:
    tag_name: $CI_COMMIT_TAG
    description: $CI_COMMIT_TAG_MESSAGE

stop_review:
  stage: cleanup
  image: curlimages/curl
  extends: .deploy-variables
  rules:
    - if: ($CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "beta" || $CI_COMMIT_TAG)
      when: never
    - if: $CI_COMMIT_BRANCH
      when: manual
  needs:
    - job: deploy_review
  environment:
    name: $CI_COMMIT_REF_NAME
    action: stop
  allow_failure: true
  tags:
    - kubernetes
  script:
    - curl -X POST -F token=$CI_JOB_TOKEN -F ref=$ASKANNA_DEPLOY_BRANCH -F variables[product]=$ASKANNA_DEPLOY_PRODUCT -F variables[action]=undeploy -F variables[branch]=$CI_COMMIT_REF_SLUG  -F variables[slug]=$CI_ENVIRONMENT_SLUG $ASKANNA_DEPLOY_TRIGGER
