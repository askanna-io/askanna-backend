# Generated by Django 3.1.14 on 2022-09-01 12:44

import uuid

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import django_extensions.db.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0008_alter_user_username_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={"unique": "A user with that username already exists."},
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name="username",
                    ),
                ),
                ("first_name", models.CharField(blank=True, max_length=30, verbose_name="first name")),
                ("last_name", models.CharField(blank=True, max_length=150, verbose_name="last name")),
                ("email", models.EmailField(blank=True, max_length=254, verbose_name="email address")),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",  # noqa: E501
                        verbose_name="active",
                    ),
                ),
                ("date_joined", models.DateTimeField(default=django.utils.timezone.now, verbose_name="date joined")),
                ("name", models.CharField(blank=True, max_length=255, verbose_name="Name of User")),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",  # noqa: E501
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Permission",
                        verbose_name="user permissions",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name="created"),
                ),
                ("deleted", models.DateTimeField(blank=True, null=True)),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name="modified"),
                ),
                ("short_uuid", models.CharField(blank=True, max_length=32)),
                ("uuid", models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
            ],
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Membership",
            fields=[
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name="created"),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name="modified"),
                ),
                ("deleted", models.DateTimeField(blank=True, null=True)),
                (
                    "uuid",
                    models.UUIDField(
                        db_index=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("short_uuid", models.CharField(blank=True, max_length=32)),
                ("object_uuid", models.UUIDField(db_index=True, editable=False)),
                ("object_type", models.CharField(choices=[("PR", "Project"), ("WS", "Workspace")], max_length=2)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="memberships",
                        related_query_name="membership",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created"],
            },
        ),
        migrations.AddIndex(
            model_name="membership",
            index=models.Index(fields=["user", "object_uuid"], name="users_membe_user_id_a4ecb3_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="membership",
            unique_together={("user", "object_uuid")},
        ),
        migrations.AlterField(
            model_name="membership",
            name="object_uuid",
            field=models.UUIDField(db_index=True),
        ),
        migrations.AddField(
            model_name="membership",
            name="role",
            field=models.CharField(choices=[("WM", "member"), ("WA", "admin")], default="WM", max_length=2),
        ),
        migrations.AddField(
            model_name="membership",
            name="job_title",
            field=models.CharField(blank=True, max_length=255, verbose_name="Job title"),
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "membership_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="account.membership",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("account.membership",),
        ),
        migrations.AlterField(
            model_name="membership",
            name="user",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="memberships",
                related_query_name="membership",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="membership",
            name="short_uuid",
            field=models.CharField(blank=True, max_length=32, unique=True),
        ),
        migrations.AlterField(
            model_name="user",
            name="short_uuid",
            field=models.CharField(blank=True, max_length=32, unique=True),
        ),
        migrations.CreateModel(
            name="Invitation",
            fields=[
                (
                    "membership_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="account.membership",
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=255, verbose_name="Name of User")),
                ("email", models.EmailField(max_length=254)),
                ("front_end_url", models.URLField()),
            ],
            options={
                "abstract": False,
            },
            bases=("account.membership",),
        ),
        migrations.RemoveIndex(
            model_name="membership",
            name="users_membe_user_id_a4ecb3_idx",
        ),
        migrations.AlterUniqueTogether(
            name="membership",
            unique_together={("user", "object_uuid", "object_type", "deleted")},
        ),
        migrations.AddField(
            model_name="user",
            name="front_end_domain",
            field=models.CharField(default=None, max_length=1024, null=True),
        ),
        migrations.RemoveField(
            model_name="invitation",
            name="name",
        ),
        migrations.AddField(
            model_name="membership",
            name="name",
            field=models.CharField(blank=True, max_length=255, verbose_name="Name of User"),
        ),
        migrations.AddField(
            model_name="user",
            name="job_title",
            field=models.CharField(blank=True, max_length=255, verbose_name="Job title"),
        ),
        migrations.AlterField(
            model_name="membership",
            name="role",
            field=models.CharField(
                choices=[("WV", "viewer"), ("WM", "member"), ("WA", "admin")], default="WM", max_length=2
            ),
        ),
        migrations.AddField(
            model_name="membership",
            name="use_global_profile",
            field=models.BooleanField(
                default=True,
                help_text="Use information from the global AskAnna profile",
                verbose_name="Use AskAnna profile",
            ),
        ),
        migrations.AlterField(
            model_name="user",
            name="first_name",
            field=models.CharField(blank=True, max_length=150, verbose_name="first name"),
        ),
        migrations.CreateModel(
            name="PasswordResetLog",
            fields=[
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name="created"),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name="modified"),
                ),
                ("deleted", models.DateTimeField(blank=True, null=True)),
                (
                    "uuid",
                    models.UUIDField(
                        db_index=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("short_uuid", models.CharField(blank=True, max_length=32, unique=True)),
                ("email", models.EmailField(max_length=254)),
                ("remote_ip", models.GenericIPAddressField(null=True, verbose_name="Remote IP")),
                ("remote_host", models.CharField(default=None, max_length=1024, null=True)),
                ("front_end_domain", models.CharField(default=None, max_length=1024, null=True)),
                ("meta", models.JSONField(default=None, null=True)),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created"],
            },
        ),
    ]
