# Generated by Django 4.1.8 on 2023-04-14 15:33

import uuid

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import core.fields


class Migration(migrations.Migration):
    replaces = [
        ("account", "0001_initial_squashed_20220901"),
        ("account", "0002_alter_user_id"),
        ("account", "0003_rename_short_uuid_to_suuid"),
        ("account", "0004_uuid_and_suuid_field_config"),
        ("account", "0005_remove_unused_fields"),
        ("account", "0006_alter_user_managers"),
        ("account", "0007_alter_membership_use_global_profile"),
        ("account", "0008_alter_user_uuid"),
        ("account", "0009_add_at_suffix_to_datetime_fields"),
        ("account", "0010_move_field_to_core_iso_third_party_app"),
        ("account", "0011_change_meta_options"),
        ("account", "0012_more_strict_in_allowing_null"),
    ]

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={"unique": "A user with that username already exists."},
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name="username",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text=(
                            "Designates whether this user should be treated as active. Unselect this instead of "
                            "deleting accounts."
                        ),
                        verbose_name="active",
                    ),
                ),
                ("date_joined", models.DateTimeField(default=django.utils.timezone.now, verbose_name="date joined")),
                ("suuid", models.CharField(editable=False, max_length=32, unique=True, verbose_name="SUUID")),
                ("created_at", core.fields.CreationDateTimeField(auto_now_add=True)),
                ("modified_at", core.fields.ModificationDateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("uuid", models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, verbose_name="UUID")),
                ("email", models.EmailField(max_length=254, verbose_name="Email address")),
                ("name", models.CharField(max_length=255, verbose_name="Name of User")),
                ("job_title", models.CharField(blank=True, default="", max_length=255, verbose_name="Job title")),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text=(
                            "The groups this user belongs to. A user will get all permissions granted to each of "
                            "their groups."
                        ),
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "ordering": ["-modified_at"],
                "get_latest_by": "modified_at",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Membership",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name="UUID"
                    ),
                ),
                ("suuid", models.CharField(editable=False, max_length=32, unique=True, verbose_name="SUUID")),
                ("created_at", core.fields.CreationDateTimeField(auto_now_add=True)),
                ("modified_at", core.fields.ModificationDateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("object_uuid", models.UUIDField(db_index=True)),
                ("object_type", models.CharField(choices=[("PR", "Project"), ("WS", "Workspace")], max_length=2)),
                (
                    "role",
                    models.CharField(
                        choices=[("WV", "viewer"), ("WM", "member"), ("WA", "admin")], default="WM", max_length=2
                    ),
                ),
                (
                    "use_global_profile",
                    models.BooleanField(
                        default=True,
                        help_text="Use information from the global user account",
                        verbose_name="Use AskAnna profile",
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=255, verbose_name="Name")),
                ("job_title", models.CharField(blank=True, max_length=255, verbose_name="Job title")),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="memberships",
                        related_query_name="membership",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "unique_together": {("user", "object_uuid", "object_type", "deleted_at")},
            },
        ),
        migrations.CreateModel(
            name="Invitation",
            fields=[
                (
                    "membership_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="account.membership",
                    ),
                ),
                ("email", models.EmailField(max_length=254)),
            ],
            options={
                "ordering": ["-modified_at"],
                "get_latest_by": "modified_at",
                "abstract": False,
            },
            bases=("account.membership",),
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "membership_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="account.membership",
                    ),
                ),
            ],
            options={
                "ordering": ["-modified_at"],
                "get_latest_by": "modified_at",
                "abstract": False,
            },
            bases=("account.membership",),
        ),
        migrations.CreateModel(
            name="PasswordResetLog",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name="UUID"
                    ),
                ),
                ("suuid", models.CharField(editable=False, max_length=32, unique=True, verbose_name="SUUID")),
                ("created_at", core.fields.CreationDateTimeField(auto_now_add=True)),
                ("modified_at", core.fields.ModificationDateTimeField(auto_now=True)),
                ("deleted_at", models.DateTimeField(blank=True, null=True)),
                ("email", models.EmailField(max_length=254)),
                ("remote_ip", models.GenericIPAddressField(null=True, verbose_name="Remote IP")),
                ("remote_host", models.CharField(blank=True, default="", max_length=1024)),
                ("front_end_domain", models.CharField(blank=True, default="", max_length=1024)),
                ("meta", models.JSONField(default=None, null=True)),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
    ]
