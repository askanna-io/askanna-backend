from pathlib import Path

from django.conf import settings
from django.db import models

from core.models import BaseModel, FileBaseModel, NameDescriptionBaseModel


class RunResult(FileBaseModel, NameDescriptionBaseModel):
    """
    Includes the result and any other output generated by the job.
    """

    run = models.OneToOneField("run.Run", on_delete=models.CASCADE, related_name="result")
    mime_type = models.CharField(
        max_length=100,
        editable=False,
        blank=True,
        help_text="Storing the mime-type of the output file",
    )
    size = models.PositiveIntegerField(editable=False, default=0, help_text="Size of the result stored")

    file_type = "result"
    file_extension = "output"
    file_readmode = "rb"
    file_writemode = "wb"

    def get_storage_location(self) -> Path:
        return Path(self.run.jobdef.project.uuid.hex) / self.run.jobdef.uuid.hex / self.run.uuid.hex

    def get_root_location(self) -> Path:
        return settings.RESULT_ROOT

    @property
    def extension(self) -> str:
        if self.name:
            extension = Path(self.name).suffix
            if extension and extension.startswith("."):
                extension = extension[1:]
        else:
            # the result.name is not set, we deal with an older result
            extension = "json"

        return extension

    class Meta:
        db_table = "run_result"
        ordering = ["-created_at"]


class ChunkedRunResultPart(BaseModel):
    filename = models.CharField(max_length=500)
    size = models.IntegerField(help_text="Size of this run result")
    file_no = models.IntegerField()
    is_last = models.BooleanField(default=False)

    runresult = models.ForeignKey("RunResult", on_delete=models.CASCADE, blank=True, null=True)

    class Meta:
        ordering = ["-created_at"]
        verbose_name = "Run result chunk"
        verbose_name_plural = "Run result chunks"
