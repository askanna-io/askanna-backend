# Generated by Django 4.2.8 on 2023-12-28 10:41

import logging

from django.conf import settings
from django.core.files.base import ContentFile
from django.db import migrations

from account.models import User
from core.models import ObjectReference
from run.models import Run
from storage.models import File
from storage.utils.file import get_content_type_from_file, get_md5_from_file

logger = logging.getLogger(__name__)


def move_run_payload_files(apps, schema_editor):
    payload_root_path = settings.STORAGE_ROOT / "projects/payloads"

    run_payloads = apps.get_model("job", "JobPayload").objects.all()

    if not run_payloads.exists():
        logger.info("No run payloads found, nothing to do")
        return

    if not payload_root_path.exists():
        logger.info(f"Payload root directory '{payload_root_path}' does not exist, nothing to do")
        return

    user_anna = User.objects.get(username="anna")

    runs_with_payload = Run.objects.filter(archive_job_payload__isnull=False)

    for run_with_payload in runs_with_payload:
        run_payload_path = (
            payload_root_path
            / str(run_with_payload.archive_job_payload.jobdef.project.uuid.hex)
            / str(run_with_payload.archive_job_payload.suuid)
        )

        if run_payload_path.exists():
            payload_file = run_payload_path / "payload.json"
            if payload_file.exists():
                if run_with_payload.archive_job_payload.owner:
                    created_by = User.objects.get(uuid=run_with_payload.archive_job_payload.owner.uuid)
                else:
                    created_by = user_anna

                # Make sure we have an ObjectReference for run and created_by
                ObjectReference.get_or_create(object=run_with_payload)
                ObjectReference.get_or_create(object=created_by)

                content_file = ContentFile(
                    payload_file.read_bytes(),
                    name=payload_file.name if payload_file.name else "payload.json",
                )

                file = File.objects.create(
                    name=payload_file.name if payload_file.name else "payload.json",
                    description="",
                    size=payload_file.stat().st_size,
                    etag=get_md5_from_file(content_file),
                    content_type=get_content_type_from_file(content_file),
                    file=content_file,
                    created_for=run_with_payload,
                    created_by=created_by,
                    created_at=run_with_payload.created_at,
                    modified_at=run_with_payload.modified_at,
                    completed_at=run_with_payload.modified_at,
                )

                run_with_payload.payload = file
                run_with_payload.save(update_fields=["payload"])

                payload_file.unlink()
            else:
                logger.info(
                    f"Payload file '{payload_file}' for run '{run_with_payload.suuid}' does not exist, cannot move "
                    "the payload file."
                )
        else:
            logger.info(
                f"Payload path '{run_payload_path}' for run '{run_with_payload.suuid}' does not exist, cannot move "
                "the payload file."
            )

    for project_directory in payload_root_path.iterdir():
        if not project_directory.is_dir():
            continue

        for payload_directory in project_directory.iterdir():
            if not payload_directory.is_dir():
                continue

            try:
                payload_directory.rmdir()
            except OSError:
                pass

        try:
            project_directory.rmdir()
        except OSError:
            pass

    try:
        payload_root_path.rmdir()
    except OSError:
        logger.info(f"Payload root directory '{payload_root_path}' is not empty, not removing it")


class Migration(migrations.Migration):
    dependencies = [
        ("core", "0006_objectreference_add_run_run_and_run_artifact"),
        ("storage", "0001_initial"),
        ("run", "0006_move_run_result_files_to_storage"),
    ]

    operations = [
        migrations.RunPython(move_run_payload_files, migrations.RunPython.noop, elidable=True),
    ]
