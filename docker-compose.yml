version: "3"

services:
  #                       #
  # Third party images    #
  #                       #
  postgres:
    image: postgres:12-alpine
    restart: on-failure
    volumes:
      - db_volume:/var/lib/postgresql/data
    env_file:
      - .env.postgres

  redis:
    image: redis:7
    restart: on-failure
    volumes:
      - redis_volume:/data

  minio:
    image: minio/minio:RELEASE.2023-09-04T19-57-37Z
    restart: on-failure
    command: server /data --console-address ":9090"
    volumes:
      - minio_volume:/data
    ports:
      - "9000:9000"
      - "9090:9090"
    env_file:
      - .env.minio

  #                       #
  # AskAnna images        #
  #                       #
  # For development, you don't need the AskAnna Backup Helper. If you want to use the backup helper, feel free to
  # uncomment the following lines.
  #
  # backup_helper:
  #   image: askanna/backup-helper
  #   restart: on-failure
  #   volumes:
  #     - backup_volume:/backups
  #     - storage_volume:/data
  #   env_file:
  #     - .env.django
  #     - .env.postgres

  #                       #
  # Project images        #
  #                       #
  django: &django
    build:
      context: .
      dockerfile: ./docker/local/django/Dockerfile
    restart: on-failure
    depends_on:
      - postgres
      - redis
    volumes:
      - .:/app:z
      - /var/run/docker.sock:/var/run/docker.sock:ro
    env_file:
      - .env.django
      - .env.postgres
    ports:
      - "8000:8000"
    stdin_open: true
    tty: true
    command: /start

  celeryworker:
    <<: *django
    ports: []
    command: /start-celeryworker

  celerybeat:
    <<: *django
    ports: []
    command: /start-celerybeat

  flower:
    <<: *django
    ports:
      - "5555:5555"
    command: /start-flower

volumes:
  storage_volume:
  db_volume:
  redis_volume:
  backup_volume:
  minio_volume:
