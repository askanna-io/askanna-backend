# Generated by Django 2.2.24 on 2021-06-24 14:17
import os
import shutil

from django.db import migrations
from django.conf import settings


def forwards_func_moveresult(apps, schema_editor):
    """
    We move files generated with `JobOutput` (containing the uuid of joboutput)
    to a new name containing the uuid of `RunResult`.
    We only remove when we can verify the copy was correct
    """
    JobOutput = apps.get_model("job", "JobOutput")
    RunResult = apps.get_model("job", "RunResult")

    for obj in RunResult.objects.all():

        run_output = JobOutput.objects.get(jobrun=obj.run)

        filename = "result_{}.output".format(obj.uuid.hex)
        old_filename = "result_{}.output".format(run_output.uuid.hex)

        storage_location = os.path.join(
            obj.jobrun.jobdef.project.uuid.hex,
            obj.jobrun.jobdef.uuid.hex,
            obj.jobrun.uuid.hex,
        )
        stored_path = os.path.join(
            settings.ARTIFACTS_ROOT,
            storage_location,
            filename,
        )
        old_stored_path = os.path.join(
            settings.ARTIFACTS_ROOT,
            storage_location,
            old_filename,
        )
        try:
            shutil.copy2(old_stored_path, stored_path)
            os.path.exists(stored_path)
        except Exception as e:  # noqa
            print(e)
        else:
            os.remove(old_stored_path)


def reverse_func(apps, schema_editor):
    JobOutput = apps.get_model("job", "JobOutput")
    RunResult = apps.get_model("job", "RunResult")

    for obj in RunResult.objects.all():

        run_output = JobOutput.objects.get(jobrun=obj.run)

        filename = "result_{}.output".format(obj.uuid.hex)
        old_filename = "result_{}.output".format(run_output.uuid.hex)

        storage_location = os.path.join(
            obj.jobrun.jobdef.project.uuid.hex,
            obj.jobrun.jobdef.uuid.hex,
            obj.jobrun.uuid.hex,
        )
        stored_path = os.path.join(
            settings.ARTIFACTS_ROOT,
            storage_location,
            filename,
        )
        old_stored_path = os.path.join(
            settings.ARTIFACTS_ROOT,
            storage_location,
            old_filename,
        )
        try:
            shutil.copy2(stored_path, old_stored_path)
            os.path.exists(old_stored_path)
        except Exception as e:  # noqa
            print(e)
        else:
            os.remove(stored_path)


class Migration(migrations.Migration):

    dependencies = [
        ("job", "0031_custom_images"),
    ]

    operations = [
        migrations.RunPython(forwards_func_moveresult, reverse_func),
    ]
