# -*- coding: utf-8 -*-
import os

from django.db import models
from django.conf import settings

from core.models import BaseModel, SlimBaseModel


class RunResult(BaseModel):
    """
    Includes the result and any other output generated by the job.
    """

    job = models.UUIDField(blank=True, null=True, editable=False)
    run = models.OneToOneField(
        "job.JobRun",
        on_delete=models.CASCADE,
        to_field="uuid",
        related_name="result",
    )
    mime_type = models.CharField(
        max_length=100,
        blank=True,
        null=True,
        help_text="Storing the mime-type of the output file",
    )
    size = models.PositiveIntegerField(
        editable=False, default=0, help_text="Size of the result stored"
    )
    lines = models.PositiveIntegerField(
        editable=False, default=0, help_text="Number of lines in the result"
    )

    owner = models.CharField(max_length=100, blank=True, null=True)

    @property
    def stored_path(self):
        return os.path.join(
            settings.ARTIFACTS_ROOT, self.storage_location, self.filename
        )

    @property
    def storage_location(self):
        return os.path.join(
            self.run.jobdef.project.uuid.hex,
            self.run.jobdef.uuid.hex,
            self.run.uuid.hex,
        )

    @property
    def filename(self):
        return "result_{}.output".format(self.uuid.hex)

    @property
    def read(self):
        """
        Read the result from filesystem and return
        """
        try:
            with open(self.stored_path, "rb") as f:
                return f.read()
        except FileNotFoundError:
            return b""

    def write(self, stream):
        """
        Write contents to the filesystem
        """
        os.makedirs(os.path.dirname(self.stored_path), exist_ok=True)

        with open(self.stored_path, "wb") as f:
            f.write(stream.read())

    def prune(self):
        try:
            os.remove(self.stored_path)
        except FileNotFoundError:
            pass

    class Meta:
        ordering = ["-created"]
        verbose_name = "Run result"
        verbose_name_plural = "Run results"


class ChunkedRunResultPart(SlimBaseModel):
    filename = models.CharField(max_length=500)
    size = models.IntegerField(help_text="Size of this runresult")
    file_no = models.IntegerField()
    is_last = models.BooleanField(default=False)

    runresult = models.ForeignKey(
        "job.RunResult", on_delete=models.CASCADE, blank=True, null=True
    )

    class Meta:
        ordering = ["-created"]
