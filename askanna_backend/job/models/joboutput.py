# -*- coding: utf-8 -*-
import json
import os
import uuid

from django.db import models
from django.conf import settings
from django.contrib.postgres.fields import JSONField
from django.utils.module_loading import import_string

from core.fields import JSONField  # noqa
from core.models import BaseModel, SlimBaseModel

from job.models.const import JOB_STATUS


class JobOutput(SlimBaseModel):
    """
    Includes the result and any other output generated by the job.
    """

    jobdef = models.UUIDField(blank=True, null=True, editable=False)
    jobrun = models.OneToOneField(
        "job.JobRun", on_delete=models.CASCADE, to_field="uuid", related_name="output",
    )
    exit_code = models.IntegerField(default=0)
    stdout = JSONField(blank=True, null=True)

    owner = models.CharField(max_length=100, blank=True, null=True)

    @property
    def stored_path(self):
        return os.path.join(
            settings.ARTIFACTS_ROOT, self.storage_location, self.filename
        )

    @property
    def storage_location(self):
        return os.path.join(
            self.jobrun.jobdef.project.uuid.hex,
            self.jobrun.jobdef.uuid.hex,
            self.jobrun.uuid.hex,
        )

    def __str__(self):
        return str(self.uuid)

    @property
    def filename(self):
        return "result_{}.output".format(self.uuid.hex)

    @property
    def read(self):
        """
            Read the result from filesystem and return
        """
        try:
            with open(self.stored_path, "rb") as f:
                return f.read()
        except:
            return b""

    def prune(self):
        pass
        # not implemented as file yet, the result is stored in the `stdout` field
        # os.remove(self.stored_path)

    class Meta:
        ordering = ["-created"]
        verbose_name = "Job Output"
        verbose_name_plural = "Job Outputs"


class ChunkedJobOutputPart(SlimBaseModel):
    filename = models.CharField(max_length=500)
    size = models.IntegerField(help_text="Size of this resultchunk")
    file_no = models.IntegerField()
    is_last = models.BooleanField(default=False)

    joboutput = models.ForeignKey(
        "job.JobOutput", on_delete=models.CASCADE, blank=True, null=True
    )

    class Meta:
        ordering = ["-created"]
